import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_signin_button/button_builder.dart';
import 'package:flutter_signin_button/button_list.dart';
import 'package:flutter_signin_button/button_view.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:killa_cam/src/blocs/auth_bloc.dart';
import 'package:killa_cam/src/screens/sign_in_email_screen.dart';
import 'package:killa_cam/src/screens/sign_in_phone_screen.dart';
import 'package:killa_cam/src/screens/sign_up_screen.dart';
import 'package:killa_cam/src/screens/verify_screen.dart';
import 'package:killa_cam/src/widgets/killa_cam_alert.dart';
import 'package:provider/provider.dart';

import 'home.dart';

class LogInScreen extends StatefulWidget {
  const LogInScreen({Key? key}) : super(key: key);

  @override
  _LogInScreenState createState() => _LogInScreenState();
}

class _LogInScreenState extends State<LogInScreen> {
  late StreamSubscription _errorMessageSubscription;
  late StreamSubscription _processRunningSubscription;
  late StreamSubscription _userSubscription;

  bool _isLoading = false;

  @override
  void initState() {
    final authBloc = Provider.of<AuthBloc>(context, listen: false);

    _errorMessageSubscription = authBloc.errorMessage.listen((errorMessage) {
      if (errorMessage != '') {
        KillaCamAlert.showErrorDialog(context, errorMessage);
      }
    });

    _processRunningSubscription = authBloc.processRunning.listen((running) {
      if (running != null) {
        setState(() {
          _isLoading = running;
        });
      }
    });

    _userSubscription = authBloc.user.listen((user) {
      if (user != null) if (user.verified == true) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (context) => const HomeScreen(),
          ),
        );
      } else {
        Navigator.of(context).pushReplacement(MaterialPageRoute(
            builder: (context) => VerifyScreen(
                  email: user.email,
                )));
      }
    });

    super.initState();
  }

  @override
  void dispose() {
    _errorMessageSubscription.cancel();
    _processRunningSubscription.cancel();
    _userSubscription.cancel();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final authBloc = Provider.of<AuthBloc>(context);
    return Scaffold(
      body: SizedBox(
        width: double.infinity,
        child: SingleChildScrollView(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              Image.asset('assets/authy.png'),
              SignInButton(
                Buttons.Email,
                onPressed: () => Navigator.of(context).pushReplacement(
                  MaterialPageRoute(
                    builder: (context) => const SignInEmailScreen(),
                  ),
                ),
              ),
              SignInButtonBuilder(
                elevation: 2.0,
                key: const ValueKey("GitHub"),
                mini: false,
                text: 'Sign in with Phone',
                icon: FontAwesomeIcons.phone,
                backgroundColor: Colors.purple,
                onPressed: () => Navigator.of(context).pushReplacement(
                  MaterialPageRoute(
                    builder: (context) => const SignInPhoneScreen(
                      mode: Mode.signIn,
                    ),
                  ),
                ),
                padding: const EdgeInsets.all(0),
                //shape: shape,
              ),
              SignInButton(Buttons.GoogleDark,
                  onPressed: () => authBloc.signInGoogle()),
              SignInButton(Buttons.Facebook,
                  onPressed: () => authBloc.signInFacebook()),
              // (Platform.isIOS)
              //     ? SignInButton(Buttons.AppleDark,
              //         onPressed: () => authBloc.signInApple())
              //     : Container(),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Text(
                  'Or',
                  style: Theme.of(context)
                      .textTheme
                      .headline6!
                      .copyWith(color: Colors.white),
                ),
              ),
              SignInButtonBuilder(
                elevation: 2.0,
                key: const ValueKey("GitHub"),
                mini: false,
                text: 'Sign up for Account',
                icon: FontAwesomeIcons.userPlus,
                backgroundColor: Colors.deepPurple,
                onPressed: () => Navigator.of(context).pushReplacement(
                  MaterialPageRoute(
                    builder: (context) => const SignUpScreen(),
                  ),
                ),
                padding: const EdgeInsets.all(0),
                //shape: shape,
              ),
            ],
          ),
        ),
      ),
    );
  }
}
